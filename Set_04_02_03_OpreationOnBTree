#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define T 2   // Minimum degree

typedef struct BTreeNode {
    int keys[2 * T - 1];
    struct BTreeNode* children[2 * T];
    int n;              // number of keys
    bool leaf;          // true if leaf
} BTreeNode;

BTreeNode* createNode(bool leaf) {
    BTreeNode* node = (BTreeNode*)malloc(sizeof(BTreeNode));
    node->leaf = leaf;
    node->n = 0;
    for (int i = 0; i < 2 * T; i++)
        node->children[i] = NULL;
    return node;
}

/* -------- 1. createTree -------- */
BTreeNode* createTree() {
    return createNode(true);
}

/* -------- Search -------- */
BTreeNode* searchItem(BTreeNode* root, int key, int* idx) {
    if (root == NULL) return NULL;

    int i = 0;
    while (i < root->n && key > root->keys[i]) i++;

    if (i < root->n && key == root->keys[i]) {
        if (idx) *idx = i;
        return root;
    }

    if (root->leaf) return NULL;
    return searchItem(root->children[i], key, idx);
}

void splitChild(BTreeNode* parent, int i, BTreeNode* y) {
    BTreeNode* z = createNode(y->leaf);
    z->n = T - 1;

    for (int j = 0; j < T - 1; j++)
        z->keys[j] = y->keys[j + T];

    if (!y->leaf) {
        for (int j = 0; j < T; j++)
            z->children[j] = y->children[j + T];
    }

    y->n = T - 1;

    for (int j = parent->n; j >= i + 1; j--)
        parent->children[j + 1] = parent->children[j];
    parent->children[i + 1] = z;

    for (int j = parent->n - 1; j >= i; j--)
        parent->keys[j + 1] = parent->keys[j];
    parent->keys[i] = y->keys[T - 1];
    parent->n++;
}

void insertNonFull(BTreeNode* node, int key) {
    int i = node->n - 1;

    if (node->leaf) {
        while (i >= 0 && key < node->keys[i]) {
            node->keys[i + 1] = node->keys[i];
            i--;
        }
        node->keys[i + 1] = key;
        node->n++;
    } else {
        while (i >= 0 && key < node->keys[i]) i--;
        i++;
        if (node->children[i]->n == 2 * T - 1) {
            splitChild(node, i, node->children[i]);
            if (key > node->keys[i]) i++;
        }
        insertNonFull(node->children[i], key);
    }
}

BTreeNode* insertItem(BTreeNode* root, int key) {
    if (root->n == 2 * T - 1) {
        BTreeNode* s = createNode(false);
        s->children[0] = root;
        splitChild(s, 0, root);
        int i = (key > s->keys[0]) ? 1 : 0;
        insertNonFull(s->children[i], key);
        return s;
    } else {
        insertNonFull(root, key);
        return root;
    }
}

BTreeNode* deleteItem(BTreeNode* root, int key) {
    if (!root) return NULL;

    int i = 0;
    while (i < root->n && key > root->keys[i]) i++;

    if (i < root->n && root->keys[i] == key) {
        if (root->leaf) {
            for (int j = i; j < root->n - 1; j++)
                root->keys[j] = root->keys[j + 1];
            root->n--;
        } else {
            printf("Delete for internal node not fully implemented.\n");
        }
    } else {
        if (!root->leaf) {
            root->children[i] = deleteItem(root->children[i], key);
        }
    }
    return root;
}

/* -------- 4. deleteTree -------- */
void deleteTree(BTreeNode* root) {
    if (!root) return;
    if (!root->leaf) {
        for (int i = 0; i <= root->n; i++)
            deleteTree(root->children[i]);
    }
    free(root);
}

void printTree(BTreeNode* root, int level) {
    if (!root) return;
    printf("Level %d [", level);
    for (int i = 0; i < root->n; i++)
        printf("%d ", root->keys[i]);
    printf("]\n");
    if (!root->leaf) {
        for (int i = 0; i <= root->n; i++)
            printTree(root->children[i], level + 1);
    }
}

int main() {
    BTreeNode* root = createTree();

    root = insertItem(root, 10);
    root = insertItem(root, 20);
    root = insertItem(root, 5);
    root = insertItem(root, 6);
    root = insertItem(root, 12);
    root = insertItem(root, 30);
    root = insertItem(root, 7);
    root = insertItem(root, 17);

    printf("B-Tree:\n");
    printTree(root, 0);

    int idx;
    BTreeNode* found = searchItem(root, 6, &idx);
    printf("Search 6: %s\n", found ? "Found" : "Not Found");

    root = deleteItem(root, 6);
    printf("After deleting 6:\n");
    printTree(root, 0);

    deleteTree(root);
    return 0;
}
